Smart House Price Forecasting Using Regression Techniques

import pandas as pd import numpy as np import joblib import gradio as gr from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error, r2_score

1. Load Dataset (replace with actual CSV path)

df = pd.read_csv('global_housing_data.csv')

2. Preprocess Data

df.dropna(subset=['House Price Index'], inplace=True) df.fillna(df.mean(numeric_only=True), inplace=True) df['Country'] = df['Country'].astype('category') df['Country_Code'] = df['Country'].cat.codes

3. Feature Selection

X = df[['Rent Index', 'Affordability Ratio', 'Mortgage Rate (%)', 'Inflation Rate (%)', 'GDP Growth (%)', 'Population Growth (%)', 'Urbanization Rate (%)', 'Construction Index', 'Country_Code']] y = df['House Price Index']

4. Train-Test Split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

5. Scaling

scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test)

6. Train Model

model = RandomForestRegressor(n_estimators=100, random_state=42) model.fit(X_train_scaled, y_train)

7. Evaluate Model

y_pred = model.predict(X_test_scaled) mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) print(f"MSE: {mse:.2f}, R2 Score: {r2:.2f}")

8. Save Model and Scaler

joblib.dump(model, 'house_price_model.pkl') joblib.dump(scaler, 'scaler.pkl')

9. Gradio Interface

def predict_price(rent_index, affordability, mortgage_rate, inflation, gdp, pop_growth, urban_rate, construction_index, country_code): input_data = pd.DataFrame([[ rent_index
